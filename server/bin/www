#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict";

require("dotenv").config();

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const db = require("../models"); // Kết nối Sequelize

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.SERVER_PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
const io = require("../config/socket.config")(server);

/**
 * Listen on provided port, on all network interfaces.
 */
(async () => {
  try {
    await db.sequelize
      .authenticate()
      .then(() => {
        if (process.env.NODE_ENV !== "production") {
          const { host, port, database } = db.sequelize.config;

          console.log(`Connection established successfully.`);
          console.log(`Host: ${host}`);
          console.log(`Port: ${port}`);
          console.log(`Database: ${database}`);
        }
      })
      .then(() => {
        console.log("✅ Database connected successfully!");
      })
      .then(() => {
        app.set("io", io);
        server.listen(port);
        console.log(`🚀 Starting server in ${process.env.NODE_ENV} mode`);
        server.on("error", onError);
        server.on("listening", onListening);
      });
  } catch (error) {
    console.error("❌ Unable to connect to the database:", error);
    process.exit(1); // Dừng server nếu không thể kết nối database
  }
})();

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const os = require("os");

function getLocalIP() {
  const interfaces = os.networkInterfaces();

  for (const [name, iface] of Object.entries(interfaces)) {
    if (!name.toLowerCase().includes("wi-fi") && !name.toLowerCase().includes("wireless")) {
      continue;
    }

    for (const config of iface) {
      if (config.family === "IPv4" && !config.internal) {
        return config.address;
      }
    }
  }

  return "127.0.0.1";
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  const localIP = getLocalIP();

  if (process.env.NODE_ENV !== "production") {
    debug("Listening on " + bind);
  }

  console.log(`🚀 Server is running on:`);
  console.log(`   - Local:   http://localhost:${addr.port}`);
  console.log(`   - Network: http://${localIP}:${addr.port}`);
}

// Handle graceful shutdown

/**
 * Handle graceful shutdown
 * Try to disconnect database before exiting the process.
 */
process.on("SIGINT", async () => {
  console.log("\nShutting down gracefully...");
  try {
    await db.sequelize.close();
    console.log("✅ Database connection closed.");
  } catch (err) {
    console.error("❌ Error closing database connection:", err);
  }
  server.close(() => {
    console.log("Server closed.");
    process.exit(0);
  });
});

process.on("SIGTERM", async () => {
  console.log("\nShutting down gracefully...");
  try {
    await db.sequelize.close();
    console.log("✅ Database connection closed.");
  } catch (err) {
    console.error("❌ Error closing database connection:", err);
  }
  server.close(() => {
    console.log("Server closed.");
    process.exit(0);
  });
});
